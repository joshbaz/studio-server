// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Auth schemas
model admin {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  email             String    @unique
  password          String
  firstname         String
  lastname          String
  privileges        String
  role              String    @default("admin")
  imageURL          String?
  phoneNumber       String
  active            Boolean   @default(false)
  deactivated       Boolean   @default(false)
  status            String    @default("offline")
  oneTimePassword   String?
  passwordExpiresAt DateTime?
  createdDate       DateTime  @default(now())
  createdAt         DateTime  @default(now())
}

model user {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  email             String?
  password          String
  firstname         String
  lastname          String
  username          String
  role              String          @default("user")
  phoneNumber       String?
  createdAt         DateTime        @default(now())
  accountVerified   Boolean         @default(false)
  oneTimePassword   String?
  passwordExpiresAt DateTime?
  watchhistory      watchhistory[]
  watched           watched[]
  Otp               otp[]
  subscription      subscription?
  paymentMethod     paymentMethod[]
  watchlist         watchlist[]
  donation          donation[]
  purchase          purchase[]
  transaction       transaction[]

  @@index([email, phoneNumber, username, firstname, lastname])
}

model otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      user?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @db.ObjectId
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

// Film schemas
model watchhistory {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  watched         watched[]
  lengthInHistory Int       @default(0)
  completed       Boolean   @default(false)
  film            film?     @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId          String?   @db.ObjectId
  user            user?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String?   @db.ObjectId
  createdAt       DateTime  @default(now())
}

model watched {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  time      DateTime @default(now())
  season    season?  @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  seasonId  String?  @db.ObjectId
  episode   episode? @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  episodeId String?  @db.ObjectId
  film      film?    @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId    String?  @db.ObjectId
  user      user?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @db.ObjectId
  createdAt DateTime @default(now())

  Watchhistory   watchhistory? @relation(fields: [watchhistoryId], references: [id])
  watchhistoryId String?       @db.ObjectId
}

model watchlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  film      film?    @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId    String?  @db.ObjectId
  user      user?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @db.ObjectId
  createdAt DateTime @default(now())
}

model film {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  overview          String
  plotSummary       String
  releaseDate       DateTime
  comingSoon        Boolean            @default(false)
  yearOfProduction  Int?
  released          String?
  runtime           String?
  genre             String?
  tags              String[]
  enableDonation    Boolean            @default(false)
  type              String             @default("movie")
  audioLanguages    audioLanguage[]
  embeddedSubtitles Boolean            @default(false)
  createdAt         DateTime           @default(now())
  subtitleLanguage  subtitleLanguage[]
  country           String?
  copyright         String?
  audienceTarget    String?
  audienceAgeGroup  String?
  visibility        String?
  filmModel         String?
  status            String             @default("offline")
  access            String             @default("free") // free, rent or buy
  price             Float              @default(0) // price in UGX for rent or buy
  posters           poster[]
  cast              cast[]
  stats             stats[]
  season            season[]
  video             video[]
  Watchhistory      watchhistory[]
  watched           watched[]
  crew              crew[]
  watchlist         watchlist[]
  donation          donation[]
  purchase          purchase[]

  @@index([title], name: "title_index")
}

model audioLanguage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  iso_639_1 String
  createdAt DateTime @default(now())

  film   film?   @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId String? @db.ObjectId
}

model subtitleLanguage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  language  String
  createdAt DateTime @default(now())

  film   film?   @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId String? @db.ObjectId
}

model poster {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  type       String
  url        String
  isCover    Boolean @default(false)
  isBackdrop Boolean @default(false)

  film   film?   @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId String? @db.ObjectId
}

model crew {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  cast           cast[]
  producer       String
  coProducers    String[]
  director       String
  writers        String[]
  music          String[]
  cinematography String[]
  editing        String[]
  production     String[]
  animation      String[]
  soundcore      String[]
  casting        String[]
  createdBy      String
  createdAt      DateTime @default(now())
  film           film?    @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId         String?  @db.ObjectId
}

model cast {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  role     String
  imageURL String
  film     film?   @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId   String? @db.ObjectId
  crew     crew?   @relation(fields: [crewId], references: [id])
  crewId   String? @db.ObjectId
}

model stats {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  views         Int     @default(0)
  likes         Int     @default(0)
  dislikes      Int     @default(0)
  rating        Int     @default(0)
  averageRating Float   @default(0)
  totalRating   Int     @default(0)
  shares        Int
  film          film?   @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId        String? @db.ObjectId
}

model season {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  overview  String
  season    Int
  episodes  episode[]
  film      film?     @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId    String?   @db.ObjectId
  createdAt DateTime  @default(now())
  watched   watched[]
}

model episode {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  overview  String
  episode   Int       @default(1)
  video     video[]
  season    season?   @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  seasonId  String?   @db.ObjectId
  createdAt DateTime  @default(now())
  watched   watched[]
}

model video {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  url        String
  format     String
  name       String
  fps        String?
  resolution String?
  bitrate    String?
  size       String?
  codec      String?
  encoding   String?
  duration   Int?     @default(0)
  isTrailer  Boolean  @default(false)
  film       film?    @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId     String?  @db.ObjectId
  createdAt  DateTime @default(now())
  episode    episode? @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  episodeId  String?  @db.ObjectId
}

// Donation model
model donation {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  user           user?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?     @db.ObjectId
  createdAt      DateTime    @default(now())
  status         String      @default("pending")
  transaction    transaction @relation(fields: [transactionsId], references: [id])
  transactionsId String      @db.ObjectId
  film           film?       @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId         String?     @db.ObjectId
}

// Table for film purchases by users
model purchase {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  user           user?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?     @db.ObjectId
  film           film?       @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId         String?     @db.ObjectId
  expiresAt      DateTime? // Date when the purchase expires if it's a rental
  createdAt      DateTime    @default(now())
  status         String      @default("pending")
  transaction    transaction @relation(fields: [transactionsId], references: [id])
  transactionsId String      @db.ObjectId
}

enum TransactionType {
  PURCHASE
  DONATION
  SUBSCRIPTION
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

model transaction {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  amount        Float
  type          TransactionType
  currency      String
  createdAt     DateTime          @default(now())
  status        TransactionStatus @default(PENDING)
  transactionId String
  purchase      purchase[]
  donation      donation[]

  paymentMethod   paymentMethod? @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String?        @db.ObjectId

  user           user?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?       @db.ObjectId
  subscription   subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?       @db.ObjectId
}

model paymentMethod {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  details       Json
  defaultStatus Boolean       @default(false)
  lastUsed      DateTime      @default(now())
  user          user?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?       @db.ObjectId
  createdAt     DateTime      @default(now())
  transaction   transaction[]
}

// Subscription Plans
enum Currency {
  USD
  UGX
  KES
  TZS
  RWF
}

enum DurationUnit {
  DAY
  WEEK
  MONTH
  YEAR
}

enum Status {
  ACTIVE
  INACTIVE
  CANCELLED
}

model subscription {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  user            user?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String?   @unique @db.ObjectId
  status          Status?   @default(ACTIVE)
  saveDetails     Boolean   @default(false)
  nextPayment     DateTime?
  previousPayment DateTime?

  plan   subscriptionPlan? @relation(fields: [planId], references: [id])
  planId String            @db.ObjectId

  transaction transaction[]
  createdAt   DateTime      @default(now())
}

model subscriptionPlan {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String         @unique
  description  String
  price        Float
  currency     Currency
  duration     DurationUnit   @default(MONTH)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  subscription subscription[]

  @@index([currency], name: "subplan_index")
}
