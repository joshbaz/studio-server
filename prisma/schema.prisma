// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Auth schemas
model admin {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  email             String    @unique
  password          String
  firstname         String
  lastname          String
  privileges        String?
  role              String    @default("admin")
  imageURL          String?
  phoneNumber       String?   @unique
  active            Boolean   @default(false)
  deactivated       Boolean   @default(false)
  status            String?   @default("offline")
  oneTimePassword   String?
  passwordExpiresAt DateTime?
  createdAt         DateTime  @default(now())
}

model user {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  email             String?
  password          String
  firstname         String
  lastname          String
  username          String
  role              String          @default("user")
  phoneNumber       String?
  createdAt         DateTime        @default(now())
  accountVerified   Boolean         @default(false)
  oneTimePassword   String?
  passwordExpiresAt DateTime?
  watchhistory      watchhistory[]
  watched           watched[]
  Otp               otp[]
  subscription      subscription?
  paymentMethod     paymentMethod[]
  watchlist         watchlist[]
  donation          donation[]
  purchase          purchase[]
  transaction       transaction[]
  likes             likes[]
  views             views[]
  rating            rating[]

  @@index([email, phoneNumber, username, firstname, lastname])
}

model otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      user?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @db.ObjectId
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

// Film schemas
model watchhistory {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  watched         watched[]
  lengthInHistory Int       @default(0)
  completed       Boolean   @default(false)
  film            film?     @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId          String?   @db.ObjectId
  user            user?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String?   @db.ObjectId
  createdAt       DateTime  @default(now())
}

model watched {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  time      DateTime @default(now())
  season    season?  @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  seasonId  String?  @db.ObjectId
  episode   episode? @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  episodeId String?  @db.ObjectId
  film      film?    @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId    String?  @db.ObjectId
  user      user?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @db.ObjectId
  createdAt DateTime @default(now())

  Watchhistory   watchhistory? @relation(fields: [watchhistoryId], references: [id])
  watchhistoryId String?       @db.ObjectId
}

enum WatchlistType {
  PURCHASED
  SAVED
}

model watchlist {
  id     String         @id @default(auto()) @map("_id") @db.ObjectId
  film   film?          @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId String?        @db.ObjectId
  type   WatchlistType? @default(SAVED)
  user   user?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?        @db.ObjectId

  createdAt DateTime @default(now())
}

model film {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  overview          String
  plotSummary       String
  releaseDate       DateTime
  type              String         @default("movie") //film (shorts), film (feature)
  yearOfProduction  String?
  released          String?
  runtime           String?
  genre             String[]
  tags              String[]
  enableDonation    Boolean        @default(false)
  audioLanguages    String[]
  embeddedSubtitles Boolean        @default(false)
  subtitleLanguage  String[]
  audienceTarget    String?
  audienceAgeGroup  String?
  visibility        String?        @default("not published") // coming soon, published, not published
  access            String         @default("free") // free, rent
  featured          Boolean        @default(false)
  cast              String[]
  directors         String[]
  producers         String[]
  writers           String[]
  soundcore         String[]
  posters           poster[]
  season            season[]
  video             video[]
  Watchhistory      watchhistory[]
  watched           watched[]
  watchlist         watchlist[]
  donation          donation[]
  likes             likes[]
  views             views[]
  rating            rating[]
  Category          Category?      @relation(fields: [categoryId], references: [id])
  categoryId        String?        @db.ObjectId

  createdAt DateTime @default(now())
  // updatedAt DateTime @updatedAt

  @@index([title], name: "title_index")
}

model poster {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  type       String
  name       String  @unique
  url        String
  isCover    Boolean @default(false)
  isBackdrop Boolean @default(false)

  film      film?    @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId    String?  @db.ObjectId
  episode   episode? @relation(fields: [episodeId], references: [id])
  episodeId String?  @db.ObjectId
  season    season?  @relation(fields: [seasonId], references: [id])
  seasonId  String?  @db.ObjectId
}

enum LikeType {
  THUMBS_UP
  THUMBS_DOWN
  NONE
}

model likes {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      user?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @db.ObjectId
  film      film?    @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId    String?  @db.ObjectId
  episode   episode? @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  episodeId String?  @db.ObjectId
  type      LikeType @default(NONE)

  createdAt DateTime @default(now())
}

model rating {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  user   user?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @db.ObjectId
  film   film?   @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId String? @db.ObjectId
  rating Int

  createdAt DateTime @default(now())
}

model views {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  user   user?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @db.ObjectId
  film   film?   @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId String? @db.ObjectId

  createdAt DateTime @default(now())
}

model season {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  season   Int
  trailers video[]
  posters  poster[]
  episodes episode[]
  film     film?     @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId   String?   @db.ObjectId
  watched  watched[]

  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @db.ObjectId

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model episode {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  overview          String
  episode           Int       @default(1)
  plotSummary       String
  releaseDate       DateTime
  yearOfProduction  String?
  released          String?
  runtime           String?
  genre             String[]
  tags              String[]
  audioLanguages    String[]
  embeddedSubtitles Boolean   @default(false)
  subtitleLanguage  String[]
  audienceTarget    String?
  audienceAgeGroup  String?
  visibility        String?   @default("not published") // coming soon, published, not published
  access            String?   @default("free") // free, rent
  cast              String[]
  directors         String[]
  producers         String[]
  writers           String[]
  soundcore         String[]
  video             video[]
  season            season?   @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  seasonId          String?   @db.ObjectId
  watched           watched[]
  posters           poster[]
  likes             likes[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

enum Resolution {
  SD
  HD
  FHD
  UHD
}

model video {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  url        String
  format     String
  name       String      @unique
  fps        String?
  resolution String?     @default("HD")
  bitrate    String?
  size       String?
  codec      String?
  encoding   String?
  duration   Int?        @default(0)
  isTrailer  Boolean     @default(false)
  film       film?       @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId     String?     @db.ObjectId
  episode    episode?    @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  episodeId  String?     @db.ObjectId
  videoPrice videoPrice?
  purchase   purchase[]
  season     season?     @relation(fields: [seasonId], references: [id])
  seasonId   String?     @db.ObjectId

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

// video prices
model videoPrice {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  video    video?  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId  String? @unique @db.ObjectId
  price    Float
  currency String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

// Donation model
model donation {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  user   user?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId
  status String  @default("pending")

  transaction    transaction @relation(fields: [transactionsId], references: [id])
  transactionsId String      @db.ObjectId
  film           film?       @relation(fields: [filmId], references: [id])
  filmId         String?     @db.ObjectId

  createdAt DateTime @default(now())
}

// Table for film purchases by users
// TODO: Think about how this will work with series / episodes
model purchase {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  user   user?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  video         video       @relation(fields: [videoId], references: [id])
  videoId       String      @db.ObjectId
  transaction   transaction @relation(fields: [transactionId], references: [id])
  transactionId String      @unique @db.ObjectId

  expiresAt DateTime? // Date when the purchase expires if it's a rental
  status    String    @default("PENDING")

  createdAt DateTime @default(now())

  @@index([userId, videoId], name: "purchase_index")
}

enum TransactionType {
  PURCHASE
  DONATION
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

model transaction {
  id                     String            @id @default(auto()) @map("_id") @db.ObjectId
  amount                 String
  type                   TransactionType
  currency               String
  createdAt              DateTime          @default(now())
  status                 TransactionStatus @default(PENDING)
  orderTrackingId        String?
  paymentMethodType      String? // mtnmoto, airtel, pesapal, pesapal-<method> etc
  financialTransactionId String?
  purchase               purchase?
  purchaseId             String?           @db.ObjectId
  donation               donation[]

  paymentMethod   paymentMethod? @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String?        @db.ObjectId

  user           user?         @relation(fields: [userId], references: [id])
  userId         String?       @db.ObjectId
  subscription   subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?       @db.ObjectId
}

model paymentMethod {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  details       Json
  defaultStatus Boolean       @default(false)
  lastUsed      DateTime      @default(now())
  user          user?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?       @db.ObjectId
  createdAt     DateTime      @default(now())
  transaction   transaction[]
}

// Subscription Plans
enum Currency {
  USD
  UGX
  KES
  TZS
  RWF
}

enum DurationUnit {
  DAY
  WEEK
  MONTH
  YEAR
}

enum Status {
  ACTIVE
  INACTIVE
  CANCELLED
}

model subscription {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  user            user?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String?   @unique @db.ObjectId
  status          Status?   @default(ACTIVE)
  saveDetails     Boolean   @default(false)
  nextPayment     DateTime?
  previousPayment DateTime?

  plan   subscriptionPlan? @relation(fields: [planId], references: [id])
  planId String            @db.ObjectId

  transaction transaction[]
  createdAt   DateTime      @default(now())
}

model subscriptionPlan {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String         @unique
  description  String
  price        Float
  currency     Currency
  duration     DurationUnit   @default(MONTH)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  subscription subscription[]

  @@index([currency], name: "subplan_index")
}

model webDonation {
  id                         String  @id @default(auto()) @map("_id") @db.ObjectId
  transactionType            String // donation
  paymentType                String // MTN-MOMO, 
  payment_status_description String  @default("pending") // pending, success, failed
  status_reason              String?
  paidAmount                 String?
  purpose                    String?
  amount                     String
  currency                   String?
  email                      String
  phonenumber                String
  firstname                  String
  lastname                   String
  orderTrackingId            String
  transactionId              String?

  createdAt DateTime @default(now())

  @@index([transactionType, paymentType, orderTrackingId], name: "webdonation_index")
}

model Category {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  type    String // ( movies, mixed, genre - same idea ) , series - seasons=["id"] episodes=[""], episodes 
  films   film[]
  seasons season[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
